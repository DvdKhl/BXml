using BXml.DocType;
using BXml.DocTypes.Ebml;

namespace BXml.DocTypes.Matroska {
    public class MatroskaDocType : EbmlDocType {

        #region DocElements
        public static readonly MatroskaDocElement Segment = new(0x18538067, EbmlElementType.Master, "Segment");
        public static readonly MatroskaDocElement SeekHead = new(0x114D9B74, EbmlElementType.Master, "SeekHead");
        public static readonly MatroskaDocElement Seek = new(0x00004DBB, EbmlElementType.Master, "Seek");
        public static readonly MatroskaDocElement SeekID = new(0x000053AB, EbmlElementType.Binary, "SeekID");
        public static readonly MatroskaDocElement SeekPosition = new(0x000053AC, EbmlElementType.UInteger, "SeekPosition");
        public static readonly MatroskaDocElement Info = new(0x1549A966, EbmlElementType.Master, "Info");
        public static readonly MatroskaDocElement SegmentUID = new(0x000073A4, EbmlElementType.Binary, "SegmentUID");
        public static readonly MatroskaDocElement SegmentFilename = new(0x00007384, EbmlElementType.UTF8, "SegmentFilename");
        public static readonly MatroskaDocElement PrevUID = new(0x003CB923, EbmlElementType.Binary, "PrevUID");
        public static readonly MatroskaDocElement PrevFilename = new(0x003C83AB, EbmlElementType.UTF8, "PrevFilename");
        public static readonly MatroskaDocElement NextUID = new(0x003EB923, EbmlElementType.Binary, "NextUID");
        public static readonly MatroskaDocElement NextFilename = new(0x003E83BB, EbmlElementType.UTF8, "NextFilename");
        public static readonly MatroskaDocElement SegmentFamily = new(0x00004444, EbmlElementType.Binary, "SegmentFamily");
        public static readonly MatroskaDocElement ChapterTranslate = new(0x00006924, EbmlElementType.Master, "ChapterTranslate");
        public static readonly MatroskaDocElement ChapterTranslateEditionUID = new(0x000069FC, EbmlElementType.UInteger, "ChapterTranslateEditionUID");
        public static readonly MatroskaDocElement ChapterTranslateCodec = new(0x000069BF, EbmlElementType.UInteger, "ChapterTranslateCodec");
        public static readonly MatroskaDocElement ChapterTranslateID = new(0x000069A5, EbmlElementType.Binary, "ChapterTranslateID");
        public static readonly MatroskaDocElement TimecodeScale = new(0x002AD7B1, EbmlElementType.UInteger, "TimecodeScale");
        public static readonly MatroskaDocElement Duration = new(0x00004489, EbmlElementType.Float, "Duration");
        public static readonly MatroskaDocElement DateUTC = new(0x00004461, EbmlElementType.Date, "DateUTC");
        public static readonly MatroskaDocElement Title = new(0x00007BA9, EbmlElementType.UTF8, "Title");
        public static readonly MatroskaDocElement MuxingApp = new(0x00004D80, EbmlElementType.UTF8, "MuxingApp");
        public static readonly MatroskaDocElement WritingApp = new(0x00005741, EbmlElementType.UTF8, "WritingApp");
        public static readonly MatroskaDocElement Cluster = new(0x1F43B675, EbmlElementType.Master, "Cluster");
        public static readonly MatroskaDocElement Timecode = new(0x000000E7, EbmlElementType.UInteger, "Timecode");
        public static readonly MatroskaDocElement SilentTracks = new(0x00005854, EbmlElementType.Master, "SilentTracks");
        public static readonly MatroskaDocElement SilentTrackNumber = new(0x000058D7, EbmlElementType.UInteger, "SilentTrackNumber");
        public static readonly MatroskaDocElement Position = new(0x000000A7, EbmlElementType.UInteger, "Position");
        public static readonly MatroskaDocElement PrevSize = new(0x000000AB, EbmlElementType.UInteger, "PrevSize");
        public static readonly MatroskaDocElement SimpleBlock = new(0x000000A3, EbmlElementType.Custom, "SimpleBlock");
        public static readonly MatroskaDocElement BlockGroup = new(0x000000A0, EbmlElementType.Master, "BlockGroup");
        public static readonly MatroskaDocElement Block = new(0x000000A1, EbmlElementType.Custom, "Block");
        public static readonly MatroskaDocElement BlockVirtual = new(0x000000A2, EbmlElementType.Binary, "BlockVirtual");
        public static readonly MatroskaDocElement BlockAdditions = new(0x000075A1, EbmlElementType.Master, "BlockAdditions");
        public static readonly MatroskaDocElement BlockMore = new(0x000000A6, EbmlElementType.Master, "BlockMore");
        public static readonly MatroskaDocElement BlockAddID = new(0x000000EE, EbmlElementType.UInteger, "BlockAddID");
        public static readonly MatroskaDocElement BlockAdditional = new(0x000000A5, EbmlElementType.Binary, "BlockAdditional");
        public static readonly MatroskaDocElement BlockDuration = new(0x0000009B, EbmlElementType.UInteger, "BlockDuration");
        public static readonly MatroskaDocElement ReferencePriority = new(0x000000FA, EbmlElementType.UInteger, "ReferencePriority");
        public static readonly MatroskaDocElement ReferenceBlock = new(0x000000FB, EbmlElementType.SInteger, "ReferenceBlock");
        public static readonly MatroskaDocElement ReferenceVirtual = new(0x000000FD, EbmlElementType.SInteger, "ReferenceVirtual");
        public static readonly MatroskaDocElement CodecState = new(0x000000A4, EbmlElementType.Binary, "CodecState");
        public static readonly MatroskaDocElement Slices = new(0x0000008E, EbmlElementType.Master, "Slices");
        public static readonly MatroskaDocElement TimeSlice = new(0x000000E8, EbmlElementType.Master, "TimeSlice");
        public static readonly MatroskaDocElement LaceNumber = new(0x000000CC, EbmlElementType.UInteger, "LaceNumber");
        public static readonly MatroskaDocElement FrameNumber = new(0x000000CD, EbmlElementType.UInteger, "FrameNumber");
        public static readonly MatroskaDocElement BlockAdditionID = new(0x000000CB, EbmlElementType.UInteger, "BlockAdditionID");
        public static readonly MatroskaDocElement Delay = new(0x000000CE, EbmlElementType.UInteger, "Delay");
        public static readonly MatroskaDocElement SliceDuration = new(0x000000CF, EbmlElementType.UInteger, "SliceDuration");
        public static readonly MatroskaDocElement ReferenceFrame = new(0x000000C8, EbmlElementType.Master, "ReferenceFrame");
        public static readonly MatroskaDocElement ReferenceOffset = new(0x000000C9, EbmlElementType.UInteger, "ReferenceOffset");
        public static readonly MatroskaDocElement ReferenceTimeCode = new(0x000000CA, EbmlElementType.UInteger, "ReferenceTimeCode");
        public static readonly MatroskaDocElement EncryptedBlock = new(0x000000AF, EbmlElementType.Binary, "EncryptedBlock");
        public static readonly MatroskaDocElement Tracks = new(0x1654AE6B, EbmlElementType.Master, "Tracks");
        public static readonly MatroskaDocElement TrackEntry = new(0x000000AE, EbmlElementType.Master, "TrackEntry");
        public static readonly MatroskaDocElement TrackNumber = new(0x000000D7, EbmlElementType.UInteger, "TrackNumber");
        public static readonly MatroskaDocElement TrackUID = new(0x000073C5, EbmlElementType.UInteger, "TrackUID");
        public static readonly MatroskaDocElement TrackType = new(0x00000083, EbmlElementType.UInteger, "TrackType");
        public static readonly MatroskaDocElement FlagEnabled = new(0x000000B9, EbmlElementType.UInteger, "FlagEnabled");
        public static readonly MatroskaDocElement FlagDefault = new(0x00000088, EbmlElementType.UInteger, "FlagDefault");
        public static readonly MatroskaDocElement FlagForced = new(0x000055AA, EbmlElementType.UInteger, "FlagForced");
        public static readonly MatroskaDocElement FlagLacing = new(0x0000009C, EbmlElementType.UInteger, "FlagLacing");
        public static readonly MatroskaDocElement MinCache = new(0x00006DE7, EbmlElementType.UInteger, "MinCache");
        public static readonly MatroskaDocElement MaxCache = new(0x00006DF8, EbmlElementType.UInteger, "MaxCache");
        public static readonly MatroskaDocElement DefaultDuration = new(0x0023E383, EbmlElementType.UInteger, "DefaultDuration");
        public static readonly MatroskaDocElement DefaultDecodedFieldDuration = new(0x00234E7A, EbmlElementType.UInteger, "DefaultDecodedFieldDuration");
        public static readonly MatroskaDocElement TrackTimecodeScale = new(0x0023314F, EbmlElementType.Float, "TrackTimecodeScale");
        public static readonly MatroskaDocElement TrackOffset = new(0x0000537F, EbmlElementType.SInteger, "TrackOffset");
        public static readonly MatroskaDocElement MaxBlockAdditionID = new(0x000055EE, EbmlElementType.UInteger, "MaxBlockAdditionID");
        public static readonly MatroskaDocElement Name = new(0x0000536E, EbmlElementType.UTF8, "Name");
        public static readonly MatroskaDocElement Language = new(0x0022B59C, EbmlElementType.ASCII, "Language");
        public static readonly MatroskaDocElement CodecID = new(0x00000086, EbmlElementType.ASCII, "CodecID");
        public static readonly MatroskaDocElement CodecPrivate = new(0x000063A2, EbmlElementType.Binary, "CodecPrivate");
        public static readonly MatroskaDocElement CodecName = new(0x00258688, EbmlElementType.UTF8, "CodecName");
        public static readonly MatroskaDocElement AttachmentLink = new(0x00007446, EbmlElementType.UInteger, "AttachmentLink");
        public static readonly MatroskaDocElement CodecSettings = new(0x003A9697, EbmlElementType.UTF8, "CodecSettings");
        public static readonly MatroskaDocElement CodecInfoURL = new(0x003B4040, EbmlElementType.ASCII, "CodecInfoURL");
        public static readonly MatroskaDocElement CodecDownloadURL = new(0x0026B240, EbmlElementType.ASCII, "CodecDownloadURL");
        public static readonly MatroskaDocElement CodecDecodeAll = new(0x000000AA, EbmlElementType.UInteger, "CodecDecodeAll");
        public static readonly MatroskaDocElement TrackOverlay = new(0x00006FAB, EbmlElementType.UInteger, "TrackOverlay");
        public static readonly MatroskaDocElement TrackTranslate = new(0x00006624, EbmlElementType.Master, "TrackTranslate");
        public static readonly MatroskaDocElement TrackTranslateEditionUID = new(0x000066FC, EbmlElementType.UInteger, "TrackTranslateEditionUID");
        public static readonly MatroskaDocElement TrackTranslateCodec = new(0x000066BF, EbmlElementType.UInteger, "TrackTranslateCodec");
        public static readonly MatroskaDocElement TrackTranslateTrackID = new(0x000066A5, EbmlElementType.Binary, "TrackTranslateTrackID");
        public static readonly MatroskaDocElement Video = new(0x000000E0, EbmlElementType.Master, "Video");
        public static readonly MatroskaDocElement FlagInterlaced = new(0x0000009A, EbmlElementType.UInteger, "FlagInterlaced");
        public static readonly MatroskaDocElement StereoMode = new(0x000053B8, EbmlElementType.UInteger, "StereoMode");
        public static readonly MatroskaDocElement AlphaMode = new(0x000053C0, EbmlElementType.UInteger, "AlphaMode");
        public static readonly MatroskaDocElement OldStereoMode = new(0x000053B9, EbmlElementType.UInteger, "OldStereoMode");
        public static readonly MatroskaDocElement PixelWidth = new(0x000000B0, EbmlElementType.UInteger, "PixelWidth");
        public static readonly MatroskaDocElement PixelHeight = new(0x000000BA, EbmlElementType.UInteger, "PixelHeight");
        public static readonly MatroskaDocElement PixelCropBottom = new(0x000054AA, EbmlElementType.UInteger, "PixelCropBottom");
        public static readonly MatroskaDocElement PixelCropTop = new(0x000054BB, EbmlElementType.UInteger, "PixelCropTop");
        public static readonly MatroskaDocElement PixelCropLeft = new(0x000054CC, EbmlElementType.UInteger, "PixelCropLeft");
        public static readonly MatroskaDocElement PixelCropRight = new(0x000054DD, EbmlElementType.UInteger, "PixelCropRight");
        public static readonly MatroskaDocElement DisplayWidth = new(0x000054B0, EbmlElementType.UInteger, "DisplayWidth");
        public static readonly MatroskaDocElement DisplayHeight = new(0x000054BA, EbmlElementType.UInteger, "DisplayHeight");
        public static readonly MatroskaDocElement DisplayUnit = new(0x000054B2, EbmlElementType.UInteger, "DisplayUnit");
        public static readonly MatroskaDocElement AspectRatioType = new(0x000054B3, EbmlElementType.UInteger, "AspectRatioType");
        public static readonly MatroskaDocElement ColourSpace = new(0x002EB524, EbmlElementType.Binary, "ColourSpace");
        public static readonly MatroskaDocElement GammaValue = new(0x002FB523, EbmlElementType.Float, "GammaValue");
        public static readonly MatroskaDocElement FrameRate = new(0x002383E3, EbmlElementType.Float, "FrameRate");
        public static readonly MatroskaDocElement Audio = new(0x000000E1, EbmlElementType.Master, "Audio");
        public static readonly MatroskaDocElement SamplingFrequency = new(0x000000B5, EbmlElementType.Float, "SamplingFrequency");
        public static readonly MatroskaDocElement OutputSamplingFrequency = new(0x000078B5, EbmlElementType.Float, "OutputSamplingFrequency");
        public static readonly MatroskaDocElement Channels = new(0x0000009F, EbmlElementType.UInteger, "Channels");
        public static readonly MatroskaDocElement ChannelPositions = new(0x00007D7B, EbmlElementType.Binary, "ChannelPositions");
        public static readonly MatroskaDocElement BitDepth = new(0x00006264, EbmlElementType.UInteger, "BitDepth");
        public static readonly MatroskaDocElement TrackOperation = new(0x000000E2, EbmlElementType.Master, "TrackOperation");
        public static readonly MatroskaDocElement TrackCombinePlanes = new(0x000000E3, EbmlElementType.Master, "TrackCombinePlanes");
        public static readonly MatroskaDocElement TrackPlane = new(0x000000E4, EbmlElementType.Master, "TrackPlane");
        public static readonly MatroskaDocElement TrackPlaneUID = new(0x000000E5, EbmlElementType.UInteger, "TrackPlaneUID");
        public static readonly MatroskaDocElement TrackPlaneType = new(0x000000E6, EbmlElementType.UInteger, "TrackPlaneType");
        public static readonly MatroskaDocElement TrackJoinBlocks = new(0x000000E9, EbmlElementType.Master, "TrackJoinBlocks");
        public static readonly MatroskaDocElement TrackJoinUID = new(0x000000ED, EbmlElementType.UInteger, "TrackJoinUID");
        public static readonly MatroskaDocElement TrickTrackUID = new(0x000000C0, EbmlElementType.UInteger, "TrickTrackUID");
        public static readonly MatroskaDocElement TrickTrackSegmentUID = new(0x000000C1, EbmlElementType.Binary, "TrickTrackSegmentUID");
        public static readonly MatroskaDocElement TrickTrackFlag = new(0x000000C6, EbmlElementType.UInteger, "TrickTrackFlag");
        public static readonly MatroskaDocElement TrickMasterTrackUID = new(0x000000C7, EbmlElementType.UInteger, "TrickMasterTrackUID");
        public static readonly MatroskaDocElement TrickMasterTrackSegmentUID = new(0x000000C4, EbmlElementType.Binary, "TrickMasterTrackSegmentUID");
        public static readonly MatroskaDocElement ContentEncodings = new(0x00006D80, EbmlElementType.Master, "ContentEncodings");
        public static readonly MatroskaDocElement ContentEncoding = new(0x00006240, EbmlElementType.Master, "ContentEncoding");
        public static readonly MatroskaDocElement ContentEncodingOrder = new(0x00005031, EbmlElementType.UInteger, "ContentEncodingOrder");
        public static readonly MatroskaDocElement ContentEncodingScope = new(0x00005032, EbmlElementType.UInteger, "ContentEncodingScope");
        public static readonly MatroskaDocElement ContentEncodingType = new(0x00005033, EbmlElementType.UInteger, "ContentEncodingType");
        public static readonly MatroskaDocElement ContentCompression = new(0x00005034, EbmlElementType.Master, "ContentCompression");
        public static readonly MatroskaDocElement ContentCompAlgo = new(0x00004254, EbmlElementType.UInteger, "ContentCompAlgo");
        public static readonly MatroskaDocElement ContentCompSettings = new(0x00004255, EbmlElementType.Binary, "ContentCompSettings");
        public static readonly MatroskaDocElement ContentEncryption = new(0x00005035, EbmlElementType.Master, "ContentEncryption");
        public static readonly MatroskaDocElement ContentEncAlgo = new(0x000047E1, EbmlElementType.UInteger, "ContentEncAlgo");
        public static readonly MatroskaDocElement ContentEncKeyID = new(0x000047E2, EbmlElementType.Binary, "ContentEncKeyID");
        public static readonly MatroskaDocElement ContentSignature = new(0x000047E3, EbmlElementType.Binary, "ContentSignature");
        public static readonly MatroskaDocElement ContentSigKeyID = new(0x000047E4, EbmlElementType.Binary, "ContentSigKeyID");
        public static readonly MatroskaDocElement ContentSigAlgo = new(0x000047E5, EbmlElementType.UInteger, "ContentSigAlgo");
        public static readonly MatroskaDocElement ContentSigHashAlgo = new(0x000047E6, EbmlElementType.UInteger, "ContentSigHashAlgo");
        public static readonly MatroskaDocElement Cues = new(0x1C53BB6B, EbmlElementType.Master, "Cues");
        public static readonly MatroskaDocElement CuePoint = new(0x000000BB, EbmlElementType.Master, "CuePoint");
        public static readonly MatroskaDocElement CueTime = new(0x000000B3, EbmlElementType.UInteger, "CueTime");
        public static readonly MatroskaDocElement CueTrackPositions = new(0x000000B7, EbmlElementType.Master, "CueTrackPositions");
        public static readonly MatroskaDocElement CueTrack = new(0x000000F7, EbmlElementType.UInteger, "CueTrack");
        public static readonly MatroskaDocElement CueClusterPosition = new(0x000000F1, EbmlElementType.UInteger, "CueClusterPosition");
        public static readonly MatroskaDocElement CueRelativePosition = new(0x000000F0, EbmlElementType.UInteger, "CueRelativePosition");
        public static readonly MatroskaDocElement CueDuration = new(0x000000B2, EbmlElementType.UInteger, "CueDuration");
        public static readonly MatroskaDocElement CueBlockNumber = new(0x00005378, EbmlElementType.UInteger, "CueBlockNumber");
        public static readonly MatroskaDocElement CueCodecState = new(0x000000EA, EbmlElementType.UInteger, "CueCodecState");
        public static readonly MatroskaDocElement CueReference = new(0x000000DB, EbmlElementType.Master, "CueReference");
        public static readonly MatroskaDocElement CueRefTime = new(0x00000096, EbmlElementType.UInteger, "CueRefTime");
        public static readonly MatroskaDocElement CueRefCluster = new(0x00000097, EbmlElementType.UInteger, "CueRefCluster");
        public static readonly MatroskaDocElement CueRefNumber = new(0x0000535F, EbmlElementType.UInteger, "CueRefNumber");
        public static readonly MatroskaDocElement CueRefCodecState = new(0x000000EB, EbmlElementType.UInteger, "CueRefCodecState");
        public static readonly MatroskaDocElement Attachments = new(0x1941A469, EbmlElementType.Master, "Attachments");
        public static readonly MatroskaDocElement AttachedFile = new(0x000061A7, EbmlElementType.Master, "AttachedFile");
        public static readonly MatroskaDocElement FileDescription = new(0x0000467E, EbmlElementType.UTF8, "FileDescription");
        public static readonly MatroskaDocElement FileName = new(0x0000466E, EbmlElementType.UTF8, "FileName");
        public static readonly MatroskaDocElement FileMimeType = new(0x00004660, EbmlElementType.ASCII, "FileMimeType");
        public static readonly MatroskaDocElement FileData = new(0x0000465C, EbmlElementType.Binary, "FileData");
        public static readonly MatroskaDocElement FileUID = new(0x000046AE, EbmlElementType.UInteger, "FileUID");
        public static readonly MatroskaDocElement FileReferral = new(0x00004675, EbmlElementType.Binary, "FileReferral");
        public static readonly MatroskaDocElement FileUsedStartTime = new(0x00004661, EbmlElementType.UInteger, "FileUsedStartTime");
        public static readonly MatroskaDocElement FileUsedEndTime = new(0x00004662, EbmlElementType.UInteger, "FileUsedEndTime");
        public static readonly MatroskaDocElement Chapters = new(0x1043A770, EbmlElementType.Master, "Chapters");
        public static readonly MatroskaDocElement EditionEntry = new(0x000045B9, EbmlElementType.Master, "EditionEntry");
        public static readonly MatroskaDocElement EditionUID = new(0x000045BC, EbmlElementType.UInteger, "EditionUID");
        public static readonly MatroskaDocElement EditionFlagHidden = new(0x000045BD, EbmlElementType.UInteger, "EditionFlagHidden");
        public static readonly MatroskaDocElement EditionFlagDefault = new(0x000045DB, EbmlElementType.UInteger, "EditionFlagDefault");
        public static readonly MatroskaDocElement EditionFlagOrdered = new(0x000045DD, EbmlElementType.UInteger, "EditionFlagOrdered");
        public static readonly MatroskaDocElement ChapterAtom = new(0x000000B6, EbmlElementType.Master, "ChapterAtom");
        public static readonly MatroskaDocElement ChapterUID = new(0x000073C4, EbmlElementType.UInteger, "ChapterUID");
        public static readonly MatroskaDocElement ChapterStringUID = new(0x00005654, EbmlElementType.UTF8, "ChapterStringUID");
        public static readonly MatroskaDocElement ChapterTimeStart = new(0x00000091, EbmlElementType.UInteger, "ChapterTimeStart");
        public static readonly MatroskaDocElement ChapterTimeEnd = new(0x00000092, EbmlElementType.UInteger, "ChapterTimeEnd");
        public static readonly MatroskaDocElement ChapterFlagHidden = new(0x00000098, EbmlElementType.UInteger, "ChapterFlagHidden");
        public static readonly MatroskaDocElement ChapterFlagEnabled = new(0x00004598, EbmlElementType.UInteger, "ChapterFlagEnabled");
        public static readonly MatroskaDocElement ChapterSegmentUID = new(0x00006E67, EbmlElementType.Binary, "ChapterSegmentUID");
        public static readonly MatroskaDocElement ChapterSegmentEditionUID = new(0x00006EBC, EbmlElementType.Binary, "ChapterSegmentEditionUID");
        public static readonly MatroskaDocElement ChapterPhysicalEquiv = new(0x000063C3, EbmlElementType.UInteger, "ChapterPhysicalEquiv");
        public static readonly MatroskaDocElement ChapterTrack = new(0x0000008F, EbmlElementType.Master, "ChapterTrack");
        public static readonly MatroskaDocElement ChapterTrackNumber = new(0x00000089, EbmlElementType.UInteger, "ChapterTrackNumber");
        public static readonly MatroskaDocElement ChapterDisplay = new(0x00000080, EbmlElementType.Master, "ChapterDisplay");
        public static readonly MatroskaDocElement ChapString = new(0x00000085, EbmlElementType.UTF8, "ChapString");
        public static readonly MatroskaDocElement ChapLanguage = new(0x0000437C, EbmlElementType.ASCII, "ChapLanguage");
        public static readonly MatroskaDocElement ChapCountry = new(0x0000437E, EbmlElementType.ASCII, "ChapCountry");
        public static readonly MatroskaDocElement ChapProcess = new(0x00006944, EbmlElementType.Master, "ChapProcess");
        public static readonly MatroskaDocElement ChapProcessCodecID = new(0x00006955, EbmlElementType.UInteger, "ChapProcessCodecID");
        public static readonly MatroskaDocElement ChapProcessPrivate = new(0x0000450D, EbmlElementType.Binary, "ChapProcessPrivate");
        public static readonly MatroskaDocElement ChapProcessCommand = new(0x00006911, EbmlElementType.Master, "ChapProcessCommand");
        public static readonly MatroskaDocElement ChapProcessTime = new(0x00006922, EbmlElementType.UInteger, "ChapProcessTime");
        public static readonly MatroskaDocElement ChapProcessData = new(0x00006933, EbmlElementType.Binary, "ChapProcessData");
        public static readonly MatroskaDocElement Tags = new(0x1254C367, EbmlElementType.Master, "Tags");
        public static readonly MatroskaDocElement Tag = new(0x00007373, EbmlElementType.Master, "Tag");
        public static readonly MatroskaDocElement Targets = new(0x000063C0, EbmlElementType.Master, "Targets");
        public static readonly MatroskaDocElement TargetTypeValue = new(0x000068CA, EbmlElementType.UInteger, "TargetTypeValue");
        public static readonly MatroskaDocElement TargetType = new(0x000063CA, EbmlElementType.ASCII, "TargetType");
        public static readonly MatroskaDocElement TagTrackUID = new(0x000063C5, EbmlElementType.UInteger, "TagTrackUID");
        public static readonly MatroskaDocElement TagEditionUID = new(0x000063C9, EbmlElementType.UInteger, "TagEditionUID");
        public static readonly MatroskaDocElement TagChapterUID = new(0x000063C4, EbmlElementType.UInteger, "TagChapterUID");
        public static readonly MatroskaDocElement TagAttachmentUID = new(0x000063C6, EbmlElementType.UInteger, "TagAttachmentUID");
        public static readonly MatroskaDocElement SimpleTag = new(0x000067C8, EbmlElementType.Master, "SimpleTag");
        public static readonly MatroskaDocElement TagName = new(0x000045A3, EbmlElementType.UTF8, "TagName");
        public static readonly MatroskaDocElement TagLanguage = new(0x0000447A, EbmlElementType.ASCII, "TagLanguage");
        public static readonly MatroskaDocElement TagDefault = new(0x00004484, EbmlElementType.UInteger, "TagDefault");
        public static readonly MatroskaDocElement TagString = new(0x00004487, EbmlElementType.UTF8, "TagString");
        public static readonly MatroskaDocElement TagBinary = new(0x00004485, EbmlElementType.Binary, "TagBinary");
        #endregion


        private static IEnumerable<MatroskaDocMetaElement> EnumerateMetaData() {
            bool notNull(object obj) => obj is ulong ? ((ulong)obj != 0) : (obj is double ? ((double)obj != 0) : (obj is float ? ((float)obj != 0) : (obj is long && ((long)obj != 0))));
            bool greaterNull(object obj) => obj is ulong ? ((ulong)obj > 0) : (obj is double ? ((double)obj > 0) : (obj is float ? ((float)obj > 0) : (obj is long && ((long)obj > 0))));
            bool zeroOrOne(object obj) => obj is ulong ? ((ulong)obj is 0 or 1) : (obj is double ? ((double)obj is 0 or 1) : (obj is float ? ((float)obj is 0 or 1) : (obj is long && ((long)obj is 0 or 1))));

            yield return new MatroskaDocMetaElement("1234WMaMu", Segment, null, null, [], "This element contains all other top-level (level 1) elements. Typically a Matroska file is composed of 1 segment.");
            yield return new MatroskaDocMetaElement("1234W  Mu", SeekHead, null, null, [Segment.Id], "Contains the position of other level 1 elements.");
            yield return new MatroskaDocMetaElement("1234WMaMu", Seek, null, null, [SeekHead.Id], "Contains a single seek entry to an EBML element.");
            yield return new MatroskaDocMetaElement("1234WMa  ", SeekID, null, null, [Seek.Id], "The binary ID corresponding to the element name.");
            yield return new MatroskaDocMetaElement("1234WMa  ", SeekPosition, null, null, [Seek.Id], "The position of the element in the segment in octets (0 = first level 1 element).");
            yield return new MatroskaDocMetaElement("1234WMaMu", Info, null, null, [Segment.Id], "Contains miscellaneous general information and statistics on the file.");
            yield return new MatroskaDocMetaElement("1234     ", SegmentUID, null, val => val is byte[] && !(new Guid((byte[])val)).Equals(new Guid(new byte[16])), [Info.Id], "A randomly generated unique ID to identify the current segment between many others (128 bits).");
            yield return new MatroskaDocMetaElement("1234     ", SegmentFilename, null, null, [Info.Id], "A filename corresponding to this segment.");
            yield return new MatroskaDocMetaElement("1234     ", PrevUID, null, null, [Info.Id], "A unique ID to identify the previous chained segment (128 bits).");
            yield return new MatroskaDocMetaElement("1234     ", PrevFilename, null, null, [Info.Id], "An escaped filename corresponding to the previous segment.");
            yield return new MatroskaDocMetaElement("1234     ", NextUID, null, null, [Info.Id], "A unique ID to identify the next chained segment (128 bits).");
            yield return new MatroskaDocMetaElement("1234     ", NextFilename, null, null, [Info.Id], "An escaped filename corresponding to the next segment.");
            yield return new MatroskaDocMetaElement("1234   Mu", SegmentFamily, null, null, [Info.Id], "A randomly generated unique ID that all segments related to each other must use (128 bits).");
            yield return new MatroskaDocMetaElement("1234   Mu", ChapterTranslate, null, null, [Info.Id], "A tuple of corresponding ID used by chapter codecs to represent this segment.");
            yield return new MatroskaDocMetaElement("1234   Mu", ChapterTranslateEditionUID, null, null, [ChapterTranslate.Id], "Specify an edition UID on which this correspondance applies. When not specified, it means for all editions found in the segment.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapterTranslateCodec, null, null, [ChapterTranslate.Id], "The chapter codec using this ID (0: Matroska Script, 1: DVD-menu).");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapterTranslateID, null, null, [ChapterTranslate.Id], "The binary value used to represent this segment in the chapter codec data. The format depends on the ChapProcessCodecID used.");
            yield return new MatroskaDocMetaElement("1234WMa  ", TimecodeScale, 1000000UL, null, [Info.Id], "Timecode scale in nanoseconds (1.000.000 means all timecodes in the segment are expressed in milliseconds).");
            yield return new MatroskaDocMetaElement("1234W    ", Duration, null, val => val is float && (float)val > 0, [Info.Id], "Duration of the segment (based on TimecodeScale).");
            yield return new MatroskaDocMetaElement("1234W    ", DateUTC, null, null, [Info.Id], "Date of the origin of timecode (value 0), i.e. production date.");
            yield return new MatroskaDocMetaElement("1234     ", Title, null, null, [Info.Id], "General name of the segment.");
            yield return new MatroskaDocMetaElement("1234WMa  ", MuxingApp, null, null, [Info.Id], "Muxing application or library ('libmatroska-0.4.3').");
            yield return new MatroskaDocMetaElement("1234WMa  ", WritingApp, null, null, [Info.Id], "Writing application ('mkvmerge-0.3.3').");
            yield return new MatroskaDocMetaElement("1234W  Mu", Cluster, null, null, [Segment.Id], "The lower level element containing the (monolithic) Block structure.");
            yield return new MatroskaDocMetaElement("1234WMa  ", Timecode, null, null, [Cluster.Id], "Absolute timecode of the cluster (based on TimecodeScale).");
            yield return new MatroskaDocMetaElement("1234     ", SilentTracks, null, null, [Cluster.Id], "The list of tracks that are not used in that part of the stream. It is useful when using overlay tracks on seeking. Then you should decide what track to use.");
            yield return new MatroskaDocMetaElement("1234   Mu", SilentTrackNumber, null, null, [SilentTracks.Id], "One of the track number that are not used from now on in the stream. It could change later if not specified as silent in a further Cluster.");
            yield return new MatroskaDocMetaElement("1234     ", Position, null, null, [Cluster.Id], "The Position of the Cluster in the segment (0 in live broadcast streams). It might help to resynchronise offset on damaged streams.");
            yield return new MatroskaDocMetaElement("1234W    ", PrevSize, null, null, [Cluster.Id], "Size of the previous Cluster, in octets. Can be useful for backward playing.");
            yield return new MatroskaDocMetaElement(" 234W  Mu", SimpleBlock, null, null, [Cluster.Id], "Similar to Block but without all the extra information, mostly used to reduced overhead when no extra feature is needed. (see SimpleBlock Structure)");
            yield return new MatroskaDocMetaElement("1234W  Mu", BlockGroup, null, null, [Cluster.Id], "Basic container of information containing a single Block or BlockVirtual, and information specific to that Block/VirtualBlock.");
            yield return new MatroskaDocMetaElement("1234WMa  ", Block, null, null, [BlockGroup.Id], "Block containing the actual data to be rendered and a timecode relative to the Cluster Timecode. (see Block Structure)");
            yield return new MatroskaDocMetaElement("         ", BlockVirtual, null, null, [BlockGroup.Id], "A Block with no data. It must be stored in the stream at the place the real Block should be in display order. (see Block Virtual)");
            yield return new MatroskaDocMetaElement("1234     ", BlockAdditions, null, null, [BlockGroup.Id], "Contain additional blocks to complete the main one. An EBML parser that has no knowledge of the Block structure could still see and use/skip these data.");
            yield return new MatroskaDocMetaElement("1234 MaMu", BlockMore, null, null, [BlockAdditions.Id], "Contain the BlockAdditional and some parameters.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", BlockAddID, 1UL, val => val is ulong && (ulong)val != 0, [BlockMore.Id], "An ID to identify the BlockAdditional level.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", BlockAdditional, null, null, [BlockMore.Id], "Interpreted by the codec as it wishes (using the BlockAddID).");
            yield return new MatroskaDocMetaElement("1234W    ", BlockDuration, "&TrackDuration", null, [BlockGroup.Id], "The duration of the Block (based on TimecodeScale). This element is mandatory when DefaultDuration is set for the track. When not written and with no DefaultDuration, the value is assumed to be the difference between the timecode of this Block and the timecode of the next Block in 'display' order (not coding order). This element can be useful at the end of a Track (as there is not other Block available), or when there is a break in a track like for subtitle tracks.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ReferencePriority, 0UL, null, [BlockGroup.Id], "This frame is referenced and has the specified cache priority. In cache only a frame of the same or higher priority can replace this frame. A value of 0 means the frame is not referenced.");
            yield return new MatroskaDocMetaElement("1234W  Mu", ReferenceBlock, null, null, [BlockGroup.Id], "Timecode of another frame used as a reference (ie: B or P frame). The timecode is relative to the block it's attached to.");
            yield return new MatroskaDocMetaElement("         ", ReferenceVirtual, null, null, [BlockGroup.Id], "Relative position of the data that should be in position of the virtual block.");
            yield return new MatroskaDocMetaElement(" 234     ", CodecState, null, null, [BlockGroup.Id], "The new codec state to use. Data interpretation is private to the codec. This information should always be referenced by a seek entry.");
            yield return new MatroskaDocMetaElement("1234W    ", Slices, null, null, [BlockGroup.Id], "Contains slices description.");
            yield return new MatroskaDocMetaElement("1234W  Mu", TimeSlice, null, null, [Slices.Id], "Contains extra time information about the data contained in the Block. While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback.");
            yield return new MatroskaDocMetaElement("1234W    ", LaceNumber, 0UL, null, [TimeSlice.Id], "The reverse number of the frame in the lace (0 is the last frame, 1 is the next to last, etc). While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback.");
            yield return new MatroskaDocMetaElement("         ", FrameNumber, 0UL, null, [TimeSlice.Id], "The number of the frame to generate from this lace with this delay (allow you to generate many frames from the same Block/Frame).");
            yield return new MatroskaDocMetaElement("         ", BlockAdditionID, 0UL, null, [TimeSlice.Id], "The ID of the BlockAdditional element (0 is the main Block).");
            yield return new MatroskaDocMetaElement("         ", Delay, 0UL, null, [TimeSlice.Id], "The (scaled) delay to apply to the element.");
            yield return new MatroskaDocMetaElement("         ", SliceDuration, 0UL, null, [TimeSlice.Id], "The (scaled) duration to apply to the element.");
            yield return new MatroskaDocMetaElement("         ", ReferenceFrame, null, null, [BlockGroup.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("     Ma  ", ReferenceOffset, null, null, [ReferenceFrame.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("     Ma  ", ReferenceTimeCode, null, null, [ReferenceFrame.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("       Mu", EncryptedBlock, null, null, [Cluster.Id], "Similar to SimpleBlock but the data inside the Block are Transformed (encrypt and/or signed). (see EncryptedBlock Structure)");
            yield return new MatroskaDocMetaElement("1234W  Mu", Tracks, null, null, [Segment.Id], "A top-level block of information with many tracks described.");
            yield return new MatroskaDocMetaElement("1234WMaMu", TrackEntry, null, null, [Tracks.Id], "Describes a track with all elements.");
            yield return new MatroskaDocMetaElement("1234WMa  ", TrackNumber, null, val => val is ulong && (ulong)val != 0, [TrackEntry.Id], "The track number as used in the Block Header (using more than 127 tracks is not encouraged, though the design allows an unlimited number).");
            yield return new MatroskaDocMetaElement("1234WMa  ", TrackUID, null, val => val is ulong && (ulong)val != 0, [TrackEntry.Id], "A unique ID to identify the Track. This should be kept the same when making a direct stream copy of the Track to another file.");
            yield return new MatroskaDocMetaElement("1234WMa  ", TrackType, null, val => val is ulong && (ulong)val != 0 && (ulong)val < 255, [TrackEntry.Id], "A set of track types coded on 8 bits (1: video, 2: audio, 3: complex, 0x10: logo, 0x11: subtitle, 0x12: buttons, 0x20: control).");
            yield return new MatroskaDocMetaElement(" 234WMa  ", FlagEnabled, 1UL, val => val is ulong && ((ulong)val == 0 || (ulong)val == 1), [TrackEntry.Id], "Set if the track is used. (1 bit)");
            yield return new MatroskaDocMetaElement("1234WMa  ", FlagDefault, 1UL, val => val is ulong && ((ulong)val == 0 || (ulong)val == 1), [TrackEntry.Id], "Set if that track (audio, video or subs) SHOULD be used if no language found matches the user preference. (1 bit)");
            yield return new MatroskaDocMetaElement("1234WMa  ", FlagForced, 0UL, val => val is ulong && ((ulong)val == 0 || (ulong)val == 1), [TrackEntry.Id], "Set if that track MUST be used during playback. There can be many forced track for a kind (audio, video or subs), the player should select the one which language matches the user preference or the default + forced track. Overlay MAY happen between a forced and non-forced track of the same kind. (1 bit)");
            yield return new MatroskaDocMetaElement("1234WMa  ", FlagLacing, 1UL, val => val is ulong && ((ulong)val == 0 || (ulong)val == 1), [TrackEntry.Id], "Set if the track may contain blocks using lacing. (1 bit)");
            yield return new MatroskaDocMetaElement("1234 Ma  ", MinCache, 0UL, null, [TrackEntry.Id], "The minimum number of frames a player should be able to cache during playback. If set to 0, the reference pseudo-cache system is not used.");
            yield return new MatroskaDocMetaElement("1234     ", MaxCache, null, null, [TrackEntry.Id], "The maximum cache size required to store referenced frames in and the current frame. 0 means no cache is needed.");
            yield return new MatroskaDocMetaElement("1234W    ", DefaultDuration, null, notNull, [TrackEntry.Id], "Number of nanoseconds (i.e. not scaled) per frame.");
            yield return new MatroskaDocMetaElement("   4     ", DefaultDecodedFieldDuration, null, notNull, [TrackEntry.Id], "The period in nanoseconds (not scaled by TimcodeScale) between two successive fields at the output of the decoding process (see the notes).");
            yield return new MatroskaDocMetaElement("1234 Ma  ", TrackTimecodeScale, 1.0f, greaterNull, [TrackEntry.Id], "The scale to apply on this track to work at normal speed in relation with other tracks (mostly used to adjust video speed when the audio length differs).");
            yield return new MatroskaDocMetaElement("         ", TrackOffset, 0L, null, [TrackEntry.Id], "A value to add to the Block's Timecode. This can be used to adjust the playback offset of a track.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", MaxBlockAdditionID, 0UL, null, [TrackEntry.Id], "The maximum value of BlockAddID. A value 0 means there is no BlockAdditions for this track.");
            yield return new MatroskaDocMetaElement("1234W    ", Name, null, null, [TrackEntry.Id], "A human-readable track name.");
            yield return new MatroskaDocMetaElement("1234W    ", Language, "eng", null, [TrackEntry.Id], "Specifies the language of the track in the Matroska languages form.");
            yield return new MatroskaDocMetaElement("1234WMa  ", CodecID, null, null, [TrackEntry.Id], "An ID corresponding to the codec, see the codec page for more info.");
            yield return new MatroskaDocMetaElement("1234W    ", CodecPrivate, null, null, [TrackEntry.Id], "Private data only known to the codec.");
            yield return new MatroskaDocMetaElement("1234W    ", CodecName, null, null, [TrackEntry.Id], "A human-readable string specifying the codec.");
            yield return new MatroskaDocMetaElement("1234     ", AttachmentLink, null, notNull, [TrackEntry.Id], "The UID of an attachment that is used by this codec.");
            yield return new MatroskaDocMetaElement("         ", CodecSettings, null, null, [TrackEntry.Id], "A string describing the encoding setting used.");
            yield return new MatroskaDocMetaElement("       Mu", CodecInfoURL, null, null, [TrackEntry.Id], "A URL to find information about the codec used.");
            yield return new MatroskaDocMetaElement("       Mu", CodecDownloadURL, null, null, [TrackEntry.Id], "A URL to download about the codec used.");
            yield return new MatroskaDocMetaElement(" 234 Ma  ", CodecDecodeAll, 1UL, zeroOrOne, [TrackEntry.Id], "The codec can decode potentially damaged data (1 bit).");
            yield return new MatroskaDocMetaElement("1234   Mu", TrackOverlay, null, null, [TrackEntry.Id], "Specify that this track is an overlay track for the Track specified (in the u-integer). That means when this track has a gap (see SilentTracks) the overlay track should be used instead. The order of multiple TrackOverlay matters, the first one is the one that should be used. If not found it should be the second, etc.");
            yield return new MatroskaDocMetaElement("1234   Mu", TrackTranslate, null, null, [TrackEntry.Id], "The track identification for the given Chapter Codec.");
            yield return new MatroskaDocMetaElement("1234   Mu", TrackTranslateEditionUID, null, null, [TrackTranslate.Id], "Specify an edition UID on which this translation applies. When not specified, it means for all editions found in the segment.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", TrackTranslateCodec, null, null, [TrackTranslate.Id], "The chapter codec using this ID (0: Matroska Script, 1: DVD-menu).");
            yield return new MatroskaDocMetaElement("1234 Ma  ", TrackTranslateTrackID, null, null, [TrackTranslate.Id], "The binary value used to represent this track in the chapter codec data. The format depends on the ChapProcessCodecID used.");
            yield return new MatroskaDocMetaElement("1234W    ", Video, null, null, [TrackEntry.Id], "Video settings.");
            yield return new MatroskaDocMetaElement(" 234WMa  ", FlagInterlaced, 0UL, zeroOrOne, [Video.Id], "Set if the video is interlaced. (1 bit)");
            yield return new MatroskaDocMetaElement("  34W    ", StereoMode, 0UL, null, [Video.Id], "Stereo-3D video mode (0: mono, 1: side by side (left eye is first), 2: top-bottom (right eye is first), 3: top-bottom (left eye is first), 4: checkboard (right is first), 5: checkboard (left is first), 6: row interleaved (right is first), 7: row interleaved (left is first), 8: column interleaved (right is first), 9: column interleaved (left is first), 10: anaglyph (cyan/red), 11: side by side (right eye is first), 12: anaglyph (green/magenta), 13 both eyes laced in one Block (left eye is first), 14 both eyes laced in one Block (right eye is first)). There are some more details on 3D support in the Specification Notes.");
            yield return new MatroskaDocMetaElement("  34W    ", AlphaMode, 0UL, null, [Video.Id], "Alpha Video Mode. Presence of this element indicates that the BlockAdditional element could contain Alpha data.");
            yield return new MatroskaDocMetaElement("         ", OldStereoMode, null, null, [Video.Id], "Bogus StereoMode value used in old versions of libmatroska. DO NOT USE. (0: mono, 1: right eye, 2: left eye, 3: both eyes).");
            yield return new MatroskaDocMetaElement("1234WMa  ", PixelWidth, null, notNull, [Video.Id], "Width of the encoded video frames in pixels.");
            yield return new MatroskaDocMetaElement("1234WMa  ", PixelHeight, null, notNull, [Video.Id], "Height of the encoded video frames in pixels.");
            yield return new MatroskaDocMetaElement("1234W    ", PixelCropBottom, 0UL, null, [Video.Id], "The number of video pixels to remove at the bottom of the image (for HDTV content).");
            yield return new MatroskaDocMetaElement("1234W    ", PixelCropTop, 0UL, null, [Video.Id], "The number of video pixels to remove at the top of the image.");
            yield return new MatroskaDocMetaElement("1234W    ", PixelCropLeft, 0UL, null, [Video.Id], "The number of video pixels to remove on the left of the image.");
            yield return new MatroskaDocMetaElement("1234W    ", PixelCropRight, 0UL, null, [Video.Id], "The number of video pixels to remove on the right of the image.");
            yield return new MatroskaDocMetaElement("1234W    ", DisplayWidth, PixelWidth, notNull, [Video.Id], "Width of the video frames to display. The default value is only valid when DisplayUnit is 0.");
            yield return new MatroskaDocMetaElement("1234W    ", DisplayHeight, PixelHeight, notNull, [Video.Id], "Height of the video frames to display. The default value is only valid when DisplayUnit is 0.");
            yield return new MatroskaDocMetaElement("1234W    ", DisplayUnit, 0UL, null, [Video.Id], "How DisplayWidth & DisplayHeight should be interpreted (0: pixels, 1: centimeters, 2: inches, 3: Display Aspect Ratio).");
            yield return new MatroskaDocMetaElement("1234W    ", AspectRatioType, 0UL, null, [Video.Id], "Specify the possible modifications to the aspect ratio (0: free resizing, 1: keep aspect ratio, 2: fixed).");
            yield return new MatroskaDocMetaElement("1234     ", ColourSpace, null, null, [Video.Id], "Same value as in AVI (32 bits).");
            yield return new MatroskaDocMetaElement("         ", GammaValue, null, greaterNull, [Video.Id], "Gamma Value.");
            yield return new MatroskaDocMetaElement("         ", FrameRate, null, greaterNull, [Video.Id], "Number of frames per second. Informational only.");
            yield return new MatroskaDocMetaElement("1234W    ", Audio, null, null, [TrackEntry.Id], "Audio settings.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", SamplingFrequency, null, null, [ChapterAtom.Id], "A unique string ID to identify the Chapter. Use for WebVTT cue identifier storage.");
            yield return new MatroskaDocMetaElement("1234WMa  ", OutputSamplingFrequency, 8000.0f, greaterNull, [Audio.Id], "Sampling frequency in Hz.");
            yield return new MatroskaDocMetaElement("1234W    ", Channels, SamplingFrequency, greaterNull, [Audio.Id], "Real output sampling frequency in Hz (used for SBR techniques).");
            yield return new MatroskaDocMetaElement("1234WMa  ", ChannelPositions, 1UL, notNull, [Audio.Id], "Numbers of channels in the track.");
            yield return new MatroskaDocMetaElement("         ", BitDepth, null, null, [Audio.Id], "Table of horizontal angles for each successive channel, see appendix.");
            yield return new MatroskaDocMetaElement("1234W    ", TrackOperation, null, notNull, [Audio.Id], "Bits per sample, mostly used for PCM.");
            yield return new MatroskaDocMetaElement("  34     ", TrackCombinePlanes, null, null, [TrackEntry.Id], "Operation that needs to be applied on tracks to create this virtual track. For more details look at the Specification Notes on the subject.");
            yield return new MatroskaDocMetaElement("  34     ", TrackPlane, null, null, [TrackOperation.Id], "Contains the list of all video plane tracks that need to be combined to create this 3D track");
            yield return new MatroskaDocMetaElement("  34 MaMu", TrackPlaneUID, null, null, [TrackCombinePlanes.Id], "Contains a video plane track that need to be combined to create this 3D track");
            yield return new MatroskaDocMetaElement("  34 Ma  ", TrackPlaneType, null, notNull, [TrackPlane.Id], "The trackUID number of the track representing the plane.");
            yield return new MatroskaDocMetaElement("  34 Ma  ", TrackJoinBlocks, null, null, [TrackPlane.Id], "The kind of plane this track corresponds to (0: left eye, 1: right eye, 2: background).");
            yield return new MatroskaDocMetaElement("  34     ", TrackJoinUID, null, null, [TrackOperation.Id], "Contains the list of all tracks whose Blocks need to be combined to create this virtual track");
            yield return new MatroskaDocMetaElement("  34 MaMu", TrickTrackUID, null, notNull, [TrackJoinBlocks.Id], "The trackUID number of a track whose blocks are used to create this virtual track.");
            yield return new MatroskaDocMetaElement("         ", TrickTrackSegmentUID, null, null, [TrackEntry.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("         ", TrickTrackFlag, null, null, [TrackEntry.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("         ", TrickMasterTrackUID, 0UL, null, [TrackEntry.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("         ", TrickMasterTrackSegmentUID, null, null, [TrackEntry.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("         ", ContentEncodings, null, null, [TrackEntry.Id], "DivX trick track extenstions");
            yield return new MatroskaDocMetaElement("1234     ", ContentEncoding, null, null, [TrackEntry.Id], "Settings for several content encoding mechanisms like compression or encryption.");
            yield return new MatroskaDocMetaElement("1234 MaMu", ContentEncodingOrder, null, null, [ContentEncodings.Id], "Settings for one content encoding like compression or encryption.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ContentEncodingScope, 0UL, null, [ContentEncoding.Id], "Tells when this modification was used during encoding/muxing starting with 0 and counting upwards. The decoder/demuxer has to start with the highest order number it finds and work its way down. This value has to be unique over all ContentEncodingOrder elements in the segment.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ContentEncodingType, 1UL, notNull, [ContentEncoding.Id], "A bit field that describes which elements have been modified in this way. Values (big endian) can be OR'ed. Possible values: \n1 - all frame contents,\n2 - the track's private data,\n4 - the next ContentEncoding (next ContentEncodingOrder. Either the data inside ContentCompression and/or ContentEncryption)");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ContentCompression, 0UL, null, [ContentEncoding.Id], "A value describing what kind of transformation has been done. Possible values:\n0 - compression,\n1 - encryption");
            yield return new MatroskaDocMetaElement("1234     ", ContentCompAlgo, null, null, [ContentEncoding.Id], "Settings describing the compression used. Must be present if the value of ContentEncodingType is 0 and absent otherwise. Each block must be decompressable even if no previous block is available in order not to prevent seeking.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ContentCompSettings, 0UL, null, [ContentCompression.Id], "The compression algorithm used. Algorithms that have been specified so far are:\n0 - zlib,\n1 - bzlib,\n2 - lzo1x\n3 - Header Stripping");
            yield return new MatroskaDocMetaElement("1234     ", ContentEncryption, null, null, [ContentCompression.Id], "Settings that might be needed by the decompressor. For Header Stripping (ContentCompAlgo=3), the bytes that were removed from the beggining of each frames of the track.");
            yield return new MatroskaDocMetaElement("1234     ", ContentEncAlgo, null, null, [ContentEncoding.Id], "Settings describing the encryption used. Must be present if the value of ContentEncodingType is 1 and absent otherwise.");
            yield return new MatroskaDocMetaElement("1234     ", ContentEncKeyID, 0UL, null, [ContentEncryption.Id], "The encryption algorithm used. The value '0' means that the contents have not been encrypted but only signed. Predefined values:\n1 - DES, 2 - 3DES, 3 - Twofish, 4 - Blowfish, 5 - AES");
            yield return new MatroskaDocMetaElement("1234     ", ContentSignature, null, null, [ContentEncryption.Id], "For public key algorithms this is the ID of the public key the the data was encrypted with.");
            yield return new MatroskaDocMetaElement("1234     ", ContentSigKeyID, null, null, [ContentEncryption.Id], "A cryptographic signature of the contents.");
            yield return new MatroskaDocMetaElement("1234     ", ContentSigAlgo, null, null, [ContentEncryption.Id], "This is the ID of the private key the data was signed with.");
            yield return new MatroskaDocMetaElement("1234     ", ContentSigHashAlgo, 0UL, null, [ContentEncryption.Id], "The algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values:\n1 - RSA");
            yield return new MatroskaDocMetaElement("1234     ", Cues, 0UL, null, [ContentEncryption.Id], "The hash algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values:\n1 - SHA1-160\n2 - MD5");
            yield return new MatroskaDocMetaElement("1234W    ", CuePoint, null, null, [Segment.Id], "A top-level element to speed seeking access. All entries are local to the segment. Should be mandatory for non 'live' streams.");
            yield return new MatroskaDocMetaElement("1234WMaMu", CueTime, null, null, [Cues.Id], "Contains all information relative to a seek point in the segment.");
            yield return new MatroskaDocMetaElement("1234WMa  ", CueTrackPositions, null, null, [CuePoint.Id], "Absolute timecode according to the segment time base.");
            yield return new MatroskaDocMetaElement("1234WMaMu", CueTrack, null, null, [CuePoint.Id], "Contain positions for different tracks corresponding to the timecode.");
            yield return new MatroskaDocMetaElement("1234WMa  ", CueClusterPosition, null, notNull, [CueTrackPositions.Id], "The track for which a position is given.");
            yield return new MatroskaDocMetaElement("1234WMa  ", CueRelativePosition, null, null, [CueTrackPositions.Id], "The position of the Cluster containing the required Block.");
            yield return new MatroskaDocMetaElement("   4WMa  ", CueDuration, null, null, [CueTrackPositions.Id], "The relative position of the referenced block inside the cluster with 0 being the first possible position for an element inside that cluster.");
            yield return new MatroskaDocMetaElement("   4WMa  ", CueBlockNumber, null, null, [CueTrackPositions.Id], "The duration of the block according to the segment time base. If missing the track's DefaultDuration does not apply and no duration information is available in terms of the cues.");
            yield return new MatroskaDocMetaElement("1234W    ", CueCodecState, 1UL, notNull, [CueTrackPositions.Id], "Number of the Block in the specified Cluster.");
            yield return new MatroskaDocMetaElement(" 234     ", CueReference, 0UL, null, [CueTrackPositions.Id], "The position of the Codec State corresponding to this Cue element. 0 means that the data is taken from the initial Track Entry.");
            yield return new MatroskaDocMetaElement(" 234   Mu", CueRefTime, null, null, [CueTrackPositions.Id], "The Clusters containing the required referenced Blocks.");
            yield return new MatroskaDocMetaElement(" 234 Ma  ", CueRefCluster, null, null, [CueReference.Id], "Timecode of the referenced Block.");
            yield return new MatroskaDocMetaElement("     Ma  ", CueRefNumber, null, null, [CueReference.Id], "The Position of the Cluster containing the referenced Block.");
            yield return new MatroskaDocMetaElement("         ", CueRefCodecState, 1UL, notNull, [CueReference.Id], "Number of the referenced Block of Track X in the specified Cluster.");
            yield return new MatroskaDocMetaElement("         ", Attachments, 0UL, null, [CueReference.Id], "The position of the Codec State corresponding to this referenced element. 0 means that the data is taken from the initial Track Entry.");
            yield return new MatroskaDocMetaElement("1234     ", AttachedFile, null, null, [Segment.Id], "Contain attached files.");
            yield return new MatroskaDocMetaElement("1234 MaMu", FileDescription, null, null, [Attachments.Id], "An attached file.");
            yield return new MatroskaDocMetaElement("1234     ", FileName, null, null, [AttachedFile.Id], "A human-friendly name for the attached file.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", FileMimeType, null, null, [AttachedFile.Id], "Filename of the attached file.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", FileData, null, null, [AttachedFile.Id], "MIME type of the file.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", FileUID, null, null, [AttachedFile.Id], "The data of the file.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", FileReferral, null, notNull, [AttachedFile.Id], "Unique ID representing the file, as random as possible.");
            yield return new MatroskaDocMetaElement("         ", FileUsedStartTime, null, null, [AttachedFile.Id], "A binary value that a track/codec can refer to when the attachment is needed.");
            yield return new MatroskaDocMetaElement("         ", FileUsedEndTime, null, null, [AttachedFile.Id], "DivX font extension");
            yield return new MatroskaDocMetaElement("         ", Chapters, null, null, [AttachedFile.Id], "DivX font extension");
            yield return new MatroskaDocMetaElement("1234     ", EditionEntry, null, null, [Segment.Id], "A system to define basic menus and partition data. For more detailed information, look at the Chapters Explanation.");
            yield return new MatroskaDocMetaElement("1234 MaMu", EditionUID, null, null, [Chapters.Id], "Contains all information about a segment edition.");
            yield return new MatroskaDocMetaElement("1234     ", EditionFlagHidden, null, notNull, [EditionEntry.Id], "A unique ID to identify the edition. It's useful for tagging an edition.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", EditionFlagDefault, 0UL, zeroOrOne, [EditionEntry.Id], "If an edition is hidden (1), it should not be available to the user interface (but still to Control Tracks). (1 bit)");
            yield return new MatroskaDocMetaElement("1234 Ma  ", EditionFlagOrdered, 0UL, zeroOrOne, [EditionEntry.Id], "If a flag is set (1) the edition should be used as the default one. (1 bit)");
            yield return new MatroskaDocMetaElement("1234     ", ChapterAtom, 0UL, zeroOrOne, [EditionEntry.Id], "Specify if the chapters can be defined multiple times and the order to play them is enforced. (1 bit)");
            yield return new MatroskaDocMetaElement("1234 MaMu", ChapterUID, null, null, [EditionEntry.Id, ChapterAtom.Id], "Contains the atom information to use as the chapter atom (apply to all tracks).");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapterStringUID, null, notNull, [ChapterAtom.Id], "A unique ID to identify the Chapter.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapterTimeStart, null, null, [ChapterAtom.Id], "Timecode of the start of Chapter (not scaled).");
            yield return new MatroskaDocMetaElement("1234     ", ChapterTimeEnd, null, null, [ChapterAtom.Id], "Timecode of the end of Chapter (timecode excluded, not scaled).");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapterFlagHidden, 0UL, zeroOrOne, [ChapterAtom.Id], "If a chapter is hidden (1), it should not be available to the user interface (but still to Control Tracks). (1 bit)");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapterFlagEnabled, 1UL, zeroOrOne, [ChapterAtom.Id], "Specify wether the chapter is enabled. It can be enabled/disabled by a Control Track. When disabled, the movie should skip all the content between the TimeStart and TimeEnd of this chapter. (1 bit)");
            yield return new MatroskaDocMetaElement("1234     ", ChapterSegmentUID, null, greaterNull, [ChapterAtom.Id], "A segment to play in place of this chapter. Edition ChapterSegmentEditionUID should be used for this segment, otherwise no edition is used.");
            yield return new MatroskaDocMetaElement("1234     ", ChapterSegmentEditionUID, null, notNull, [ChapterAtom.Id], "The edition to play from the segment linked in ChapterSegmentUID.");
            yield return new MatroskaDocMetaElement("1234     ", ChapterPhysicalEquiv, null, null, [ChapterAtom.Id], "Specify the physical equivalent of this ChapterAtom like 'DVD' (60) or 'SIDE' (50), see complete list of values.");
            yield return new MatroskaDocMetaElement("1234     ", ChapterTrack, null, null, [ChapterAtom.Id], "List of tracks on which the chapter applies. If this element is not present, all tracks apply");
            yield return new MatroskaDocMetaElement("1234 MaMu", ChapterTrackNumber, null, notNull, [ChapterTrack.Id], "UID of the Track to apply this chapter too. In the absense of a control track, choosing this chapter will select the listed Tracks and deselect unlisted tracks. Absense of this element indicates that the Chapter should be applied to any currently used Tracks.");
            yield return new MatroskaDocMetaElement("1234   Mu", ChapterDisplay, null, null, [ChapterAtom.Id], "Contains all possible strings to use for the chapter display.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapString, null, null, [ChapterDisplay.Id], "Contains the string to use as the chapter atom.");
            yield return new MatroskaDocMetaElement("1234 MaMu", ChapLanguage, "eng", null, [ChapterDisplay.Id], "The languages corresponding to the string, in the bibliographic ISO-639-2 form.");
            yield return new MatroskaDocMetaElement("1234   Mu", ChapCountry, null, null, [ChapterDisplay.Id], "The countries corresponding to the string, same 2 octets as in Internet domains.");
            yield return new MatroskaDocMetaElement("1234   Mu", ChapProcess, null, null, [ChapterAtom.Id], "Contains all the commands associated to the Atom.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapProcessCodecID, 0UL, null, [ChapProcess.Id], "Contains the type of the codec used for the processing. A value of 0 means native Matroska processing (to be defined), a value of 1 means the DVD command set is used. More codec IDs can be added later.");
            yield return new MatroskaDocMetaElement("1234     ", ChapProcessPrivate, null, null, [ChapProcess.Id], "Some optional data attached to the ChapProcessCodecID information. For ChapProcessCodecID = 1, it is the 'DVD level' equivalent.");
            yield return new MatroskaDocMetaElement("1234   Mu", ChapProcessCommand, null, null, [ChapProcess.Id], "Contains all the commands associated to the Atom.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapProcessTime, null, null, [ChapProcessCommand.Id], "Defines when the process command should be handled (0: during the whole chapter, 1: before starting playback, 2: after playback of the chapter).");
            yield return new MatroskaDocMetaElement("1234 Ma  ", ChapProcessData, null, null, [ChapProcessCommand.Id], "Contains the command information. The data should be interpreted depending on the ChapProcessCodecID value. For ChapProcessCodecID = 1, the data correspond to the binary DVD cell pre/post commands.");
            yield return new MatroskaDocMetaElement("1234   Mu", Tags, null, null, [Segment.Id], "Element containing elements specific to Tracks/Chapters. A list of valid tags can be found here.");
            yield return new MatroskaDocMetaElement("1234 MaMu", Tag, null, null, [Tags.Id], "Element containing elements specific to Tracks/Chapters.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", Targets, null, null, [Tag.Id], "Contain all UIDs where the specified meta data apply. It is empty to describe everything in the segment.");
            yield return new MatroskaDocMetaElement("1234     ", TargetTypeValue, 50UL, null, [Targets.Id], "A number to indicate the logical level of the target (see TargetType).");
            yield return new MatroskaDocMetaElement("1234     ", TargetType, null, null, [Targets.Id], "An informational string that can be used to display the logical level of the target like 'ALBUM', 'TRACK', 'MOVIE', 'CHAPTER', etc (see TargetType).");
            yield return new MatroskaDocMetaElement("1234   Mu", TagTrackUID, 0UL, null, [Targets.Id], "A unique ID to identify the Track(s) the tags belong to. If the value is 0 at this level, the tags apply to all tracks in the Segment.");
            yield return new MatroskaDocMetaElement("1234   Mu", TagEditionUID, 0UL, null, [Targets.Id], "A unique ID to identify the EditionEntry(s) the tags belong to. If the value is 0 at this level, the tags apply to all editions in the Segment.");
            yield return new MatroskaDocMetaElement("1234   Mu", TagChapterUID, 0UL, null, [Targets.Id], "A unique ID to identify the Chapter(s) the tags belong to. If the value is 0 at this level, the tags apply to all chapters in the Segment.");
            yield return new MatroskaDocMetaElement("1234   Mu", TagAttachmentUID, 0UL, null, [Targets.Id], "A unique ID to identify the Attachment(s) the tags belong to. If the value is 0 at this level, the tags apply to all the attachments in the Segment.");
            yield return new MatroskaDocMetaElement("1234 MaMu", SimpleTag, null, null, [Tag.Id, SimpleTag.Id], "Contains general information about the target.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", TagName, null, null, [SimpleTag.Id], "The name of the Tag that is going to be stored.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", TagLanguage, "und", null, [SimpleTag.Id], "Specifies the language of the tag specified, in the Matroska languages form.");
            yield return new MatroskaDocMetaElement("1234 Ma  ", TagDefault, 1UL, zeroOrOne, [SimpleTag.Id], "Indication to know if this is the default/original language to use for the given tag. (1 bit)");
            yield return new MatroskaDocMetaElement("1234     ", TagString, null, null, [SimpleTag.Id], "The value of the Tag.");
            yield return new MatroskaDocMetaElement("1234     ", TagBinary, null, null, [SimpleTag.Id], "The values of the Tag if it is binary. Note that this cannot be used in the same SimpleTag as TagString.");
        }

        public static void RetrieveMatroskaBlock(IBXmlReader reader, out MatroskaBlock block) { block = new MatroskaBlock(reader.RetrieveRawValue()); }
        public static void RetrieveMatroskaHeaderBlock(IBXmlReader reader, out MatroskaHeaderBlock block) {
            block = new MatroskaHeaderBlock(reader.RetrievePartialRawValue(Math.Max(
                (int)Math.Min(reader.Header.DataLength, 2 * 1024), //Ebml Lacing upper bound
                (int)(reader.Header.DataLength >> 7) //Xiph lacing upper bound
            )));
        }

        protected override object DecodeCustomData(BXmlDocElement docElement, ReadOnlySpan<byte> encodedData) => encodedData.ToArray();

        public MatroskaDocType() : base(EnumerateMetaData().Select(x => x.DocElement)) { }



    }
}
